//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: query.proto

package EcdarProtoBuf;

@kotlin.jvm.JvmSynthetic
inline fun queryResponse(block: EcdarProtoBuf.QueryResponseKt.Dsl.() -> kotlin.Unit): EcdarProtoBuf.QueryProtos.QueryResponse =
  EcdarProtoBuf.QueryResponseKt.Dsl._create(EcdarProtoBuf.QueryProtos.QueryResponse.newBuilder()).apply { block() }._build()
object QueryResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: EcdarProtoBuf.QueryProtos.QueryResponse.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: EcdarProtoBuf.QueryProtos.QueryResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): EcdarProtoBuf.QueryProtos.QueryResponse = _builder.build()

    /**
     * <code>.EcdarProtoBuf.Query query = 1;</code>
     */
    var query: EcdarProtoBuf.QueryProtos.Query
      @JvmName("getQuery")
      get() = _builder.getQuery()
      @JvmName("setQuery")
      set(value) {
        _builder.setQuery(value)
      }
    /**
     * <code>.EcdarProtoBuf.Query query = 1;</code>
     */
    fun clearQuery() {
      _builder.clearQuery()
    }
    /**
     * <code>.EcdarProtoBuf.Query query = 1;</code>
     * @return Whether the query field is set.
     */
    fun hasQuery(): kotlin.Boolean {
      return _builder.hasQuery()
    }

    /**
     * <code>.EcdarProtoBuf.QueryResponse.RefinementResult refinement = 3;</code>
     */
    var refinement: EcdarProtoBuf.QueryProtos.QueryResponse.RefinementResult
      @JvmName("getRefinement")
      get() = _builder.getRefinement()
      @JvmName("setRefinement")
      set(value) {
        _builder.setRefinement(value)
      }
    /**
     * <code>.EcdarProtoBuf.QueryResponse.RefinementResult refinement = 3;</code>
     */
    fun clearRefinement() {
      _builder.clearRefinement()
    }
    /**
     * <code>.EcdarProtoBuf.QueryResponse.RefinementResult refinement = 3;</code>
     * @return Whether the refinement field is set.
     */
    fun hasRefinement(): kotlin.Boolean {
      return _builder.hasRefinement()
    }

    /**
     * <code>.EcdarProtoBuf.QueryResponse.ComponentResult component = 4;</code>
     */
    var component: EcdarProtoBuf.QueryProtos.QueryResponse.ComponentResult
      @JvmName("getComponent")
      get() = _builder.getComponent()
      @JvmName("setComponent")
      set(value) {
        _builder.setComponent(value)
      }
    /**
     * <code>.EcdarProtoBuf.QueryResponse.ComponentResult component = 4;</code>
     */
    fun clearComponent() {
      _builder.clearComponent()
    }
    /**
     * <code>.EcdarProtoBuf.QueryResponse.ComponentResult component = 4;</code>
     * @return Whether the component field is set.
     */
    fun hasComponent(): kotlin.Boolean {
      return _builder.hasComponent()
    }

    /**
     * <code>string error = 5;</code>
     */
    var error: kotlin.String
      @JvmName("getError")
      get() = _builder.getError()
      @JvmName("setError")
      set(value) {
        _builder.setError(value)
      }
    /**
     * <code>string error = 5;</code>
     */
    fun clearError() {
      _builder.clearError()
    }
    /**
     * <code>string error = 5;</code>
     * @return Whether the error field is set.
     */
    fun hasError(): kotlin.Boolean {
      return _builder.hasError()
    }
    val resultCase: EcdarProtoBuf.QueryProtos.QueryResponse.ResultCase
      @JvmName("getResultCase")
      get() = _builder.getResultCase()

    fun clearResult() {
      _builder.clearResult()
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun refinementResult(block: EcdarProtoBuf.QueryResponseKt.RefinementResultKt.Dsl.() -> kotlin.Unit): EcdarProtoBuf.QueryProtos.QueryResponse.RefinementResult =
    EcdarProtoBuf.QueryResponseKt.RefinementResultKt.Dsl._create(EcdarProtoBuf.QueryProtos.QueryResponse.RefinementResult.newBuilder()).apply { block() }._build()
  object RefinementResultKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: EcdarProtoBuf.QueryProtos.QueryResponse.RefinementResult.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: EcdarProtoBuf.QueryProtos.QueryResponse.RefinementResult.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): EcdarProtoBuf.QueryProtos.QueryResponse.RefinementResult = _builder.build()

      /**
       * <code>bool success = 1;</code>
       */
      var success: kotlin.Boolean
        @JvmName("getSuccess")
        get() = _builder.getSuccess()
        @JvmName("setSuccess")
        set(value) {
          _builder.setSuccess(value)
        }
      /**
       * <code>bool success = 1;</code>
       */
      fun clearSuccess() {
        _builder.clearSuccess()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class RelationProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <code>repeated .EcdarProtoBuf.StateTuple relation = 2;</code>
       */
       val relation: com.google.protobuf.kotlin.DslList<EcdarProtoBuf.ObjectProtos.StateTuple, RelationProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getRelationList()
        )
      /**
       * <code>repeated .EcdarProtoBuf.StateTuple relation = 2;</code>
       * @param value The relation to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addRelation")
      fun com.google.protobuf.kotlin.DslList<EcdarProtoBuf.ObjectProtos.StateTuple, RelationProxy>.add(value: EcdarProtoBuf.ObjectProtos.StateTuple) {
        _builder.addRelation(value)
      }/**
       * <code>repeated .EcdarProtoBuf.StateTuple relation = 2;</code>
       * @param value The relation to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignRelation")
      inline operator fun com.google.protobuf.kotlin.DslList<EcdarProtoBuf.ObjectProtos.StateTuple, RelationProxy>.plusAssign(value: EcdarProtoBuf.ObjectProtos.StateTuple) {
        add(value)
      }/**
       * <code>repeated .EcdarProtoBuf.StateTuple relation = 2;</code>
       * @param values The relation to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllRelation")
      fun com.google.protobuf.kotlin.DslList<EcdarProtoBuf.ObjectProtos.StateTuple, RelationProxy>.addAll(values: kotlin.collections.Iterable<EcdarProtoBuf.ObjectProtos.StateTuple>) {
        _builder.addAllRelation(values)
      }/**
       * <code>repeated .EcdarProtoBuf.StateTuple relation = 2;</code>
       * @param values The relation to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllRelation")
      inline operator fun com.google.protobuf.kotlin.DslList<EcdarProtoBuf.ObjectProtos.StateTuple, RelationProxy>.plusAssign(values: kotlin.collections.Iterable<EcdarProtoBuf.ObjectProtos.StateTuple>) {
        addAll(values)
      }/**
       * <code>repeated .EcdarProtoBuf.StateTuple relation = 2;</code>
       * @param index The index to set the value at.
       * @param value The relation to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setRelation")
      operator fun com.google.protobuf.kotlin.DslList<EcdarProtoBuf.ObjectProtos.StateTuple, RelationProxy>.set(index: kotlin.Int, value: EcdarProtoBuf.ObjectProtos.StateTuple) {
        _builder.setRelation(index, value)
      }/**
       * <code>repeated .EcdarProtoBuf.StateTuple relation = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearRelation")
      fun com.google.protobuf.kotlin.DslList<EcdarProtoBuf.ObjectProtos.StateTuple, RelationProxy>.clear() {
        _builder.clearRelation()
      }}
  }
  @kotlin.jvm.JvmSynthetic
  inline fun componentResult(block: EcdarProtoBuf.QueryResponseKt.ComponentResultKt.Dsl.() -> kotlin.Unit): EcdarProtoBuf.QueryProtos.QueryResponse.ComponentResult =
    EcdarProtoBuf.QueryResponseKt.ComponentResultKt.Dsl._create(EcdarProtoBuf.QueryProtos.QueryResponse.ComponentResult.newBuilder()).apply { block() }._build()
  object ComponentResultKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: EcdarProtoBuf.QueryProtos.QueryResponse.ComponentResult.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: EcdarProtoBuf.QueryProtos.QueryResponse.ComponentResult.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): EcdarProtoBuf.QueryProtos.QueryResponse.ComponentResult = _builder.build()

      /**
       * <code>.EcdarProtoBuf.Component component = 1;</code>
       */
      var component: EcdarProtoBuf.ComponentProtos.Component
        @JvmName("getComponent")
        get() = _builder.getComponent()
        @JvmName("setComponent")
        set(value) {
          _builder.setComponent(value)
        }
      /**
       * <code>.EcdarProtoBuf.Component component = 1;</code>
       */
      fun clearComponent() {
        _builder.clearComponent()
      }
      /**
       * <code>.EcdarProtoBuf.Component component = 1;</code>
       * @return Whether the component field is set.
       */
      fun hasComponent(): kotlin.Boolean {
        return _builder.hasComponent()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun EcdarProtoBuf.QueryProtos.QueryResponse.copy(block: EcdarProtoBuf.QueryResponseKt.Dsl.() -> kotlin.Unit): EcdarProtoBuf.QueryProtos.QueryResponse =
  EcdarProtoBuf.QueryResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun EcdarProtoBuf.QueryProtos.QueryResponse.RefinementResult.copy(block: EcdarProtoBuf.QueryResponseKt.RefinementResultKt.Dsl.() -> kotlin.Unit): EcdarProtoBuf.QueryProtos.QueryResponse.RefinementResult =
  EcdarProtoBuf.QueryResponseKt.RefinementResultKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun EcdarProtoBuf.QueryProtos.QueryResponse.ComponentResult.copy(block: EcdarProtoBuf.QueryResponseKt.ComponentResultKt.Dsl.() -> kotlin.Unit): EcdarProtoBuf.QueryProtos.QueryResponse.ComponentResult =
  EcdarProtoBuf.QueryResponseKt.ComponentResultKt.Dsl._create(this.toBuilder()).apply { block() }._build()
